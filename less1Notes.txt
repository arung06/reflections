git commands
=============
*** commit id appears to the top of the commit msg
*** Branches are very light-weight in git => create them left and right!

* git clone <the url of the repository to copy> # Make a copy of an entire Git repository, including the history, onto your own computer.
  - git clone will also copy the commit history of the repository. 
  - git clone would create a new directory automatically
* git diff <commit id1 old> <commit id2 new> # diff between two commits
  - git diff considers the first argument as the "original", and the second argument as the "new" version, so additions are lines present in the second argument but not the first.
*** git diff <old cmt id1> <new cmt id2> <filename> # show the diff in the file between two commits
  - If you reverse the order of the commits, additions will show as deletions and vice versa
* git diff HEAD~1 HEAD  
* git log --stat  # git log with files changes stats (number of insertions and deletions)
* git config --global color.ui auto # To get colored diff output
* git log -- <filename>  # shows all commits that affected the metioned file
* gitk # handy gui for git operations
* gitk <filename> # to see history of that file 
* git checkout <cmt id> # to checkout specific version of the repo (Temporarily reset all files in a directory to their state at the time of a specific commit.; causes HEAD to detach from the current branch)
  - The state when a specific commit is checked out instead of a branch - is what's called a "detached HEAD".
  - When you instead choose to check out a commit hash, the consequence is that when you make changes and commit them, these changes do NOT belong to any branch.
* git checkout -b <branch_name> <cmt id>  #create a new branch at the mentioned commit id and switch to it.


----------------------------------------------------

* Cmdline tools for file comparison:
   Windows: FC <file1> <file2>
   Linux: diff -u <file1> <file2>

Git Bash on windows:
cd  ~/git/gitAndGitHub/
* cd; cd  git/gitAndGitHub/asteroids  or  ~/git/gitAndGitHub/reflections 
   
* Wikipedia, Dropbox, Google docs - all support version history of some sort, but not very suitable for code.

* CVS (Concurrent Version Systems), SVN (Subversion) etc are other VCS. We'll focus on Git
  - Create, Store and Access diiferent version of the same code. 
  
* A good rule of thumb is to make one commit per logical change.

  
Git Errors and Warnings Solution
---------------------------------
"Should not be doing an octopus"
Octopus is a strategy Git uses to combine many different versions of code together. This message can appear if you try to use this strategy in an inappropriate situation  

"You are in 'detached HEAD' state"
HEAD is what Git calls the commit you are currently on. You can “detach” the HEAD by switching to a previous commit, which we’ll see in the next video. 
Despite what it sounds like, it’s actually not a bad thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

----------

*** Separate commits are required to save different versions of a file(s)
 - "Commits are Git's way of saving versions"
 - commit --amend doesn't create separate versions (you need to push to gerrit before amending each time to save versions in this case)
 - one option is to have separate commits for saving various versions and then squash these commits at the end to a single commit before pushing/merging
 
Behavior of git checkout
--------------------------
*** "Checking out an earlier commit will change the state of at least one file."
 - This is sometimes true. Git doesn't allow you to save a new commit if no files have been updated, so you might think this is always true. 
   However, it's possible to do the following:
   1. Save a commit (call this commit 1).
   2. Update some files and save another commit (call this commit 2).
   3. Change all the files back to their state during commit 1, then save again (call this commit 3).
     - This sometimes happens if commit 2 contained a bug, and it's important to fix the bug quickly. The easiest thing to do might be to remove all the changes introduced by commit 2 to fix the bug, 
      then figure out how to safely reintroduce the changes later.
   4. At this point, commit 3 is the latest commit, so if you checkout commit 1, none of the files will be changed. 


* Checking out an earlier commit will change the state of more than one file.
* Checking out an earlier commit will change the state of every file in the repository.
  - Both of these are sometimes true. Since each commit tracks the state of all files in the repository, it is possible that checking out an earlier commit will change the state of multiple files, 
    or even all the files in the repository. However, it is possible to save a new commit after changing only one file, so it is possible only one file will change. 

* After checking out a commit, the state of all the files in the repository will be from the same point in time.
  - This is always true. A commit saves a snapshot of all files in the repository at the time the commit was made, so checking out an earlier commit will result in all the 
    files being reverted to their state at the time the commit was made. That is, the files will be in a consistent state. 
    
    
    
    