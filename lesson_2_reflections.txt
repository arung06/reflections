Lesson 2, reflections
---------------------
R* What happens when you initialize a repository? Why do you need to do it?
  - An empty branch called master is created
  - There are no commits in the git log
  - .git directory is created
  - We need to do it to start tracking files under a directory in git VCS

R* How is the staging area different from the working directory and the repository? What value do you think it offers?
   - Staging area can hold files that are part of the logical problem that are complete while other pieces/files are  
     still in progress in the working directory
   - It prevents or flags inadvertent edits to finalized files  
   - No inadvertent commits can be made.
   - Staging areas thus helps us to control exactly what we commit

R* How can you use the staging area to make sure you have one commit per logical change?
 - We assemble all individual files belonging to the logical change in the staging-area and once they're fully verified,
   we submit them as part of a single commit

R* What are some situations when branches would be helpful in keeping your history organized? How would branches help?
  - I could have separate development and release branches so that only production quality software goes into release branch.
    All development can happen in the other branch
  - i could create debug-specific branches to root cause bugs and check bug fixes.
  - I could create seperate branches to incorporate custom features

R* How do the diagrams help you visualize the branch structure?
  - The help us see the place where branches fork so that we know the common parent commits
  - They tell us where to merge two branches to unify them again

R* What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 - The result is a single branch that has histories (commits) of both branches in its git log
 - To show that the merge commit has two parents

R* What are the pros and cons of Git's automatic merging vs. always doing merges manually?
   - Pros: Fast, convenient, error-free
   - Cons: Slow, inconvenient, error-prone