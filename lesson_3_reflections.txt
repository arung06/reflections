R* When would you want to use a remote repository rather than keeping all your work local?
- When my local repo has grown in size and i would like to have a back-up of it in the cloud, 
  i would decide to set up a remote repository to which i can back up ll my past and future
  commits.

R* Why might you want to always pull changes manually rather than having Git automatically stay
   up-to-date with your remote repository?
- I may be evaluating a new feature or fixing a bug that conflicts with commits already on the remote repo
  So a pull may not even happen cleanly.
- I may be operating on a specific topic branch (different from master) for the above purpose. I may choose
  to publish it even as a separate feature branch on the repo

R* Describe the differences between forks, clones, and branches. When would you use one instead of another?
- Cloning is when you replicate a git repo locally from an available URL. The URL itself could point to a remote or local repo.
- Forking is unique to github wherein you "clone" an existing repo on github's servers itself, i.e. from one github account to another account
- Branching involves only a single local repo. It involves choosing a paticular chain of commits. Only one branch can be active for a repo at any given time.
  A repo can have multiple branches to choose from, whether the repo is local or remote

R* What is the benefit of having a copy of the last known state of the remote stored locally?
   - It helps us to base our new commits on top of the remote's latest state so that there would be no conflicts when we push the commit.
   - The idea is to first pull the latest state from remote, and rebase our commits on top of it and then push our new commits.

R* How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?
   - Without Git or any other VCS, we would periodically be syncing and merging our personal copies of the project using manual diff tools on a file-by-file basis.
     and also be performing functional verification checks to ensure that a relevant subset always works. The project itself may be shared as tarballs over the internet/email.
   - Cons: It would be time-consuming and error-prone to sync-up and merge manually; Root causing and fixing regressions would be harder.
   - Pros: No learning curve involved as in git or github

R* When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  - If i'm the only one working on my github repo, i would only make changes to the remote's master branch directly. There is no
    need of collaboration and Pull Requests here. Unless of course if i'm internally forking my repo into two long-term branches -
    one with basic features and the other with advanced and arguably less stable features. Even then, i won't use Pull Requests
  - If my github repo's master has already been pulled and is worked on by others, i would want to check with them before i make
    changes to master that might affect their use case. This situation warrants collaboration and i can do this via separate branches
    and pull requests on github. This method takes time but it ensures all users of the repo are satisfied